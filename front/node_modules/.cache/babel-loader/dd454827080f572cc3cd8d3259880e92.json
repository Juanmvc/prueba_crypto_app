{"ast":null,"code":"var _jsxFileName = \"/home/juan/prueba_app_crypto/front/src/views/Dashboard/Dashboard.tsx\",\n    _s = $RefreshSig$();\n\nimport { ButtonSolid, Grid, Box, CryptoCard } from 'design-system';\nimport React, { useEffect, useState } from 'react';\nimport { getCryptoData } from \"../../Repositories/CryptoRepository\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Dashboard = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [busy, setBusy] = useState(true);\n  useEffect(() => {\n    loadCryptoData();\n  }, []);\n\n  const loadCryptoData = async () => {\n    setBusy(true);\n\n    try {\n      const data = await getCryptoData();\n      const json = await data.json();\n      setData(json);\n    } catch (e) {\n      console.log(\"Ha ocurrido un error\");\n    }\n\n    setBusy(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      bg: \"white\",\n      pt: \"28px\",\n      pl: \"16px\",\n      pr: \"16px\",\n      borderTopLeftRadius: \"30px\",\n      borderTopRightRadius: \"30px\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        pl: \"16px\",\n        pr: \"16px\",\n        mb: \"65px\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Recent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          gridTemplateColumns: [\"1fr\", \"1fr 1fr\"],\n          gridRowGap: \"24px\",\n          gridColumnGap: \"18px\",\n          children: !busy && data.map(crypto => {\n            return /*#__PURE__*/_jsxDEV(CryptoCard, {\n              name: crypto.name,\n              abreviation: crypto.sku,\n              value: crypto.stock.toString(),\n              variant: crypto.variant.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 28\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        pb: \"32px\",\n        height: \"64px\",\n        children: /*#__PURE__*/_jsxDEV(ButtonSolid, {\n          onClick: () => console.log(\"CLICK\"),\n          children: \"Show all transactions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Dashboard, \"rkHgzh9lhNZ7NpqeJLmdsAszY7U=\");\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/juan/prueba_app_crypto/front/src/views/Dashboard/Dashboard.tsx"],"names":["ButtonSolid","Grid","Box","CryptoCard","React","useEffect","useState","getCryptoData","Dashboard","data","setData","busy","setBusy","loadCryptoData","json","e","console","log","map","crypto","name","sku","stock","toString","variant"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,IAAtB,EAA4BC,GAA5B,EAA6CC,UAA7C,QAA+D,eAA/D;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,aAAT,QAA8B,qCAA9B;;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAU7B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAe,EAAf,CAAhC;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,cAAc;AACf,GAFM,EAEJ,EAFI,CAAT;;AAIE,QAAMA,cAAc,GAAG,YAAa;AAClCD,IAAAA,OAAO,CAAC,IAAD,CAAP;;AACA,QAAI;AACF,YAAMH,IAAI,GAAG,MAAMF,aAAa,EAAhC;AACA,YAAMO,IAAI,GAAG,MAAML,IAAI,CAACK,IAAL,EAAnB;AACAJ,MAAAA,OAAO,CAACI,IAAD,CAAP;AAED,KALD,CAKE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD;;AACDL,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAXD;;AAeA,sBAAQ;AAAA,2BACJ,QAAC,GAAD;AAAK,MAAA,EAAE,EAAC,OAAR;AAAgB,MAAA,EAAE,EAAC,MAAnB;AAA0B,MAAA,EAAE,EAAC,MAA7B;AAAoC,MAAA,EAAE,EAAC,MAAvC;AAA8C,MAAA,mBAAmB,EAAC,MAAlE;AAAyE,MAAA,oBAAoB,EAAC,MAA9F;AAAA,8BACI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAe,QAAA,EAAE,EAAC,MAAlB;AAAyB,QAAA,EAAE,EAAC,MAA5B;AAAA,gCACI,QAAC,GAAD;AAAK,UAAA,OAAO,EAAC,MAAb;AAAoB,UAAA,cAAc,EAAC,MAAnC;AAAA,iCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,IAAD;AAAM,UAAA,mBAAmB,EAAE,CAAC,KAAD,EAAQ,SAAR,CAA3B;AAA+C,UAAA,UAAU,EAAC,MAA1D;AAAiE,UAAA,aAAa,EAAC,MAA/E;AAAA,oBACG,CAACD,IAAD,IAASF,IAAI,CAACS,GAAL,CAASC,MAAM,IAAI;AAC3B,gCAAO,QAAC,UAAD;AACG,cAAA,IAAI,EAAEA,MAAM,CAACC,IADhB;AAEG,cAAA,WAAW,EAAED,MAAM,CAACE,GAFvB;AAGG,cAAA,KAAK,EAAEF,MAAM,CAACG,KAAP,CAAaC,QAAb,EAHV;AAIG,cAAA,OAAO,EAAEJ,MAAM,CAACK,OAAP,CAAeD,QAAf;AAJZ;AAAA;AAAA;AAAA;AAAA,oBAAP;AAMD,WAPS;AADZ;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAiBI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAe,QAAA,MAAM,EAAC,MAAtB;AAAA,+BACI,QAAC,WAAD;AACI,UAAA,OAAO,EAAE,MAAMP,OAAO,CAACC,GAAR,CAAY,OAAZ,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADI,mBAAR;AA4BD,CA5DI;;GAAMT,S;;KAAAA,S","sourcesContent":["import { ButtonSolid, Grid, Box, Text, Icon, CryptoCard } from 'design-system';\nimport React, { useEffect, useState } from 'react';\nimport { getCryptoData } from \"../../Repositories/CryptoRepository\"\n\nexport const Dashboard = () => {\n\n  interface CryptoData {\n    id: string,\n    name: string;\n    sku: string;\n    stock: number;\n    variant: number;\n  }\n\n  const [data, setData] = useState<CryptoData[]>([])\n  const [busy, setBusy] = useState(true)\n\n  useEffect(() => {\n      loadCryptoData()\n    }, []);\n  \n    const loadCryptoData = async ()  => {\n      setBusy(true);\n      try {\n        const data = await getCryptoData();\n        const json = await data.json();\n        setData(json)\n        \n      } catch (e) {\n        console.log(\"Ha ocurrido un error\")\n      }\n      setBusy(false)\n    }\n\n      \n\n    return (<>\n        <Box bg=\"white\" pt=\"28px\" pl=\"16px\" pr=\"16px\" borderTopLeftRadius=\"30px\" borderTopRightRadius=\"30px\">\n            <Box pl=\"16px\" pr=\"16px\" mb=\"65px\">\n                <Box display=\"flex\" justifyContent=\"left\">\n                    <p>Recent</p>\n                </Box>\n                <Grid gridTemplateColumns={[\"1fr\", \"1fr 1fr\"]} gridRowGap=\"24px\" gridColumnGap=\"18px\">\n                  {!busy && data.map(crypto => {\n                    return <CryptoCard\n                              name={crypto.name}\n                              abreviation={crypto.sku}\n                              value={crypto.stock.toString()}\n                              variant={crypto.variant.toString()}\n                              />\n                  })\n                  }\n                </Grid>\n            </Box>\n            <Box pb=\"32px\" height=\"64px\">\n                <ButtonSolid\n                    onClick={() => console.log(\"CLICK\")}\n                >\n                    Show all transactions\n                </ButtonSolid>\n            </Box>\n        </Box>\n      </>\n    );\n  };"]},"metadata":{},"sourceType":"module"}